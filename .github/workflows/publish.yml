name: Publish

on:
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    runs-on: ubuntu-latest

    outputs:
      version: ${{ env.VERSION }}
      release_id: ${{ steps.create-release.outputs.result }}
    
    steps:
      - name: Git Checkout
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 18.x

      - name: Grab Version
        run: echo "VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      
      - name: Grab Changelog
        run: |
          CHANGELOG=$(awk -v ver=$VERSION '/^## / { if (p) { exit }; if ($2 == ver) { p=1; next} } p' CHANGELOG.md)
          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          echo "$CHANGELOG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create Release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: process.env.VERSION,
              name: process.env.VERSION,
              body: process.env.CHANGELOG,
              draft: true,
              prerelease: false
            })
            
            return data.id
  
  deploy-api:
    runs-on: ubuntu-latest
    needs: create-release
        
    steps:
      - name: Git Checkout
        uses: actions/checkout@v2
        
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 18.x

      - name: Install Dependencies
        run: cd packages/api && npm ci

      - name: Build API
        run: cd packages/api && npm run build
        env:
          encryptionKey: ${{ secrets.ENCRYPTION_KEY }}
          jwtSecret: ${{ secrets.JWT_SECRET }}
          mongo: ${{ secrets.MONGO }}
          port: ${{ secrets.PORT }}
          rateLimit: ${{ secrets.RATE_LIMIT }}
          emailUser: ${{ secrets.EMAIL_USER }}
          emailPassword: ${{ secrets.EMAIL_PASSWORD }}

      - name: Deploy API
        uses: azurydev/deploy-action@v0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          privateKey: ${{ secrets.SSH_KEY }}
          destination: /root/drgn
          directory: /packages/api/dist
          pm2: drgn

  build-app:
    strategy:
      fail-fast: false
      matrix:
        platform: [ macos-latest, ubuntu-latest, windows-latest ]

    runs-on: ${{ matrix.platform }}
    needs: [ create-release ]

    steps:
      - name: Git Checkout
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 16

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Install System Dependencies (Ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev webkit2gtk-4.0 libappindicator3-dev librsvg2-dev patchelf

      - name: Install Dependencies
        run: cd packages/app && npm ci
      
      - name: Build Web
        run: cd packages/app && npm run build

      - name: Build App
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          projectPath: ./packages/app

  publish-release:
    runs-on: ubuntu-latest
    needs: [ create-release, build-app ]

    outputs:
      published_at: ${{ steps.publish-release.outputs.result }}
    
    steps:
      - name: Publish Release
        id: publish-release
        uses: actions/github-script@v6
        env:
          RELEASE_ID: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            const { data } = await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.RELEASE_ID,
              draft: false,
              prerelease: false
            })

            return data.published_at

  publish-update:
    runs-on: ubuntu-latest
    needs: [ create-release, build-app, publish-release ]

    steps:
      - name: Git Checkout
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 18.x
      
      - name: Install node-fetch
        run: npm install node-fetch@2

      - name: Create Update
        uses: actions/github-script@v6
        env:
          VERSION: ${{ needs.create-release.outputs.version }}
          PUBLISHED_AT: ${{ needs.publish-release.outputs.published_at }}
        with:
          script: |
            const fetch = require('node-fetch')
            const json = await (await fetch('https://api.github.com/repos/drgnjs/drgn/git/trees/dev')).json()

            const macSignature = await (await fetch(`https://github.com/drgnjs/drgn/releases/download/${process.env.VERSION}/drgn.app.tar.gz.sig`)).text()
            const linuxSignature = await (await fetch(`https://github.com/drgnjs/drgn/releases/download/${process.env.VERSION}/drgn_${process.env.VERSION.replace('v', '')}_amd64.AppImage.tar.gz.sig`)).text()
            const windowsSignature = await (await fetch(`https://github.com/drgnjs/drgn/releases/download/${process.env.VERSION}/drgn_${process.env.VERSION.replace('v', '')}_x64_en-US.msi.zip.sig`)).text()

            const stringData = JSON.stringify({
              name: process.env.VERSION,
              notes: `Read our changelog to learn more: https://drgnjs.com/changelog/${process.env.VERSION.replaceAll('.', '')}`,
              pub_date: process.env.PUBLISHED_AT.replaceAll('\"', ''),
              platforms: {
                'darwin-x86_64': {
                  signature: macSignature,
                  url: `https://github.com/drgnjs/drgn/releases/download/${process.env.VERSION}/drgn.app.tar.gz`
                },
                'linux-x86_64': {
                  signature: linuxSignature,
                  url: `https://github.com/drgnjs/drgn/releases/download/${process.env.VERSION}/drgn_${process.env.VERSION.replace('v', '')}_amd64.AppImage.tar.gz`
                },
                'windows-x86_64': {
                  signature: windowsSignature,
                  url: `https://github.com/drgnjs/drgn/releases/download/${process.env.VERSION}/drgn_${process.env.VERSION.replace('v', '')}_x64_en-US.msi.zip`
                }
              }
            }, null, 2) + '\n'

            const buffer = new Buffer(stringData)
            const base64Data = buffer.toString('base64')
            
            github.rest.repos.createOrUpdateFileContents({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: 'release.json',
              sha: json.tree.filter(i => i.path === 'release.json')[0].sha,
              content: base64Data,
              message: `published \`${process.env.VERSION}\``
            })
