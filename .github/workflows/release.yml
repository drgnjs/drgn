name: Release

on:
  push:
    branches: [ dev ]

jobs:
  create_release:
    runs-on: ubuntu-latest

    outputs:
      releaseId: ${{ steps.create_release.outputs.result }}
    
    steps:
      - name: Git Checkout
        uses: actions/checkout@v2

      - name: Grab Version
        run: |
          VERSION=$(cat version.txt)
          echo "VERSION<<EOF" >> $GITHUB_ENV
          echo "$VERSION" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      
      - name: Grab Changelog
        run: |
          CHANGELOG=$(awk -v ver=$(cat version.txt) '/^## / { if (p) { exit }; if ($2 == ver) { p=1; next} } p' changelog.md)
          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          echo "$CHANGELOG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: process.env.VERSION,
              name: process.env.VERSION,
              body: process.env.CHANGELOG,
              draft: true,
              prerelease: false
            })
            
            return data.id


  publish_release:
    runs-on: ubuntu-latest

    needs: create_release
    
    steps:
      - name: Publish Release
        env:
          releaseId: ${{needs.create_release.outputs.releaseId}}
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.releaseId,
              draft: false,
              prerelease: false
            })

#  build:
